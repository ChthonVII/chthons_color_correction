shaders = "20"

# This shader+LUT encompasses color correction circuit emulation > bt1886appdx1 EotF function > gamut conversion w/ chromatic adapation, state-of-the-art gamut compression
# Input is TV-gamma-space RGB; output is linearRGB.
# From here forward *ALL* framebuffers need to be float. Otherwise dark blues will go fucky.
shader0 = shaders/trilinearLUT-type1.slang
scale_type0 = source
scale0 = "1.000000"
filter_linear0 = false
float_framebuffer0 = true
wrap_mode0 = "clamp_to_edge"
alias0 = XbrSource

# Perform upscaling with reverse-aa followed by bicubic, as done by crt-hyllian-pixel-art
# This can be replaced with upscaling of your choice.
# You can use XBR/ScaleFX/nnedi3/etc. for smooth edges, or bilinear/lanzcos/jinc/etc. for something close to original pixel, or even nearest neighbor if you want.
# Just make sure the scanline pass is getting input that's final x resolution and 10x original y resolution.

# Reverse AA
shader1 = "shaders/reverseaa.slang"
filter_linear1 = false
wrap_mode1 = clamp_to_edge
float_framebuffer1 =  "true"
scale_type1 = "source"
scale1 = "2.000000"

# Scale to final x resolution and 10x original y resolution.
# X is scaled to (eventually) achieve 4:3 aspect ratio.
# If full height of 16:9 screen is used, X should be 75% of viewport.
# Y needs to be 10x original for the scanline filter to work properly
# Reverse AA did 2x, so need 5x more Y scale
shader2 = "../interpolation/shaders/bicubic-x.slang"
filter_linear2 = false
wrap_mode2 = clamp_to_edge
float_framebuffer2 =  "true"
scale_type_x2 = "viewport"
scale_x2 = "0.750000"
scale_type_y2 = "source"
scale_y2 = "1.000000"

shader3 = "../interpolation/shaders/bicubic-y.slang"
filter_linear3 = false
wrap_mode3 = clamp_to_edge
float_framebuffer3 =  "true"
scale_type_x3 = "source"
scale_x3 = "1.000000"
scale_type_y3 = "source"
scale_y3 = "5.000000"

# Apply scanlines
shader4 = "shaders/scanline.slang"
filter_linear4 = "false"
wrap_mode4 = "clamp_to_edge"
mipmap_input4 = "false"
float_framebuffer4 = "true"
scale_type4 = "source"
scale4 = "1.000000"

# Downscale Y to fit viewport, achieving 4:3 aspect ratio.
shader5 =  "../interpolation/shaders/spline36-y.slang"
filter_linear5 = "true"
wrap_mode5 = "clamp_to_border"
float_framebuffer5 = "true"
scale_type_x5 = "source"
scale_x5 = "1.000000"
scale_type_y5 = "viewport"
scale_y5 = "1.000000"

# Apply aperature grille effect
shader6 =   "shaders/aperaturegrille.slang"
filter_linear6 =   "false"
wrap_mode6 =   "clamp_to_edge"
mipmap_input6 =   "false"
float_framebuffer6 =   "true"
scale_type6 =   "source"
scale6 =   "1.000000"
alias6 = NoBlurSource

//======== Downscale 3 times (to ~1/8 size per dimension) for glow blurring.
// Downscale and perform the blur on a smaller texture for performance.
// Use a 4x4 lanczos1 downscale to minimize aliasing and shimmering in the blur.
shader7 = shaders/lanczos1_downsample.slang
filter_linear7 = true
wrap_mode7 = clamp_to_border
mipmap_input7 = false
scale_type7 = source
scale7 = 0.5
float_framebuffer7 = true
alias7 = DownsampledOnce

shader8 = shaders/blur_horizontal.slang
filter_linear8 = true
wrap_mode8 = clamp_to_border
mipmap_input8 = false
scale_type8 = source
scale8 = 1.0
float_framebuffer8 = true

shader9 = shaders/blur_vertical.slang
filter_linear9 = true
wrap_mode9 = clamp_to_border
mipmap_input9 = false
scale_type9 = source
scale9 = 1.0
float_framebuffer9 = true

shader10 = ../stock.slang
filter_linear10 = true
wrap_mode10 = clamp_to_border
mipmap_input10 = false
scale_type10 = source
scale10 = 2.0
float_framebuffer10 = true
alias10 = LightBlurSource

shader11 = shaders/lanczos1_downsample-back.slang
filter_linear11 = true
wrap_mode11 = clamp_to_border
mipmap_input11 = false
scale_type11 = source
scale11 = 0.5
float_framebuffer11 = true

shader12 = shaders/lanczos1_downsample.slang
filter_linear12 = true
wrap_mode12 = clamp_to_border
mipmap_input12 = false
scale_type12 = source
scale12 = 0.5
float_framebuffer12 = true

//======== Blur for the glow: first pass horizontal, second pass vertical.
shader13 = shaders/blur_horizontal.slang
filter_linear13 = true
wrap_mode13 = clamp_to_border
mipmap_input13 = false
scale_type13 = source
scale13 = 1.0
float_framebuffer13 = true

shader14 = shaders/blur_vertical.slang
filter_linear14 = true
wrap_mode14 = clamp_to_border
mipmap_input14 = false
scale_type14 = source
scale14 = 1.0
float_framebuffer14 = true

//======== Upscale the blurred texture.
// Repeated bilinear upscales blur the texture a bit more, which is noticeable
// with small blur sigmas. However, here are no blocky artifacts like we would
// get if we upscaled straight to the viewport size. The final upscale happens
// in the composite pass.
shader15 = ../stock.slang
filter_linear15 = true
wrap_mode15 = clamp_to_border
mipmap_input15 = false
scale_type15 = source
scale15 = 2.0
float_framebuffer15 = true

shader16 = ../stock.slang
filter_linear16 = true
wrap_mode16 = clamp_to_border
mipmap_input16 = false
scale_type16 = source
scale16 = 2.0
float_framebuffer16 = true

# Do halation/blur
shader17 = "shaders/halationdiffusion.slang"
filter_linear17 = "false"
float_framebuffer17 = "true"
scale_type17 = "source"
scale17 = "1.000000"

# Letterbox the result
# This can be replaced with a "fancy borders" shader
shader18 = shaders/letterbox.slang
scale_type18 = viewport
scale18 = "1.000000"
filter_linear18 = "false"
float_framebuffer18 = "true"

# Back to sRGB gamma space
shader19 = shaders/delinearizeSRGB.slang
scale_type19 = source
scale19 = "1.000000"
filter_linear19 = "false"

textures = "SamplerLUT"
SamplerLUT_linear = false
SamplerLUT = luts/newtest11.png
